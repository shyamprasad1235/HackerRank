import java.util.*;

public class CastleOnTheGrid {
    
    static class Position {
        int x, y, moves;
        
        Position(int x, int y, int moves) {
            this.x = x;
            this.y = y;
            this.moves = moves;
        }
    }
    
    public static int minimumMoves(String[] grid, int startX, int startY, int goalX, int goalY) {
        int n = grid.length;
        boolean[][] visited = new boolean[n][n];
        
        Queue<Position> queue = new LinkedList<>();
        queue.add(new Position(startX, startY, 0));
        visited[startX][startY] = true;
        
        int[][] directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        
        while (!queue.isEmpty()) {
            Position current = queue.poll();
            
            if (current.x == goalX && current.y == goalY) {
                return current.moves;
            }
            
            for (int[] direction : directions) {
                int newX = current.x;
                int newY = current.y;
                
                while (true) {
                    newX += direction[0];
                    newY += direction[1];
                    
                    if (newX < 0 || newX >= n || newY < 0 || newY >= n || grid[newX].charAt(newY) == 'X' || visited[newX][newY]) {
                        break;
                    }
                    
                    queue.add(new Position(newX, newY, current.moves + 1));
                    visited[newX][newY] = true;
                }
            }
        }
        
        return -1;
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine(); // Consume newline character
        
        String[] grid = new String[n];
        for (int i = 0; i < n; i++) {
            grid[i] = scanner.nextLine();
        }
        
        int startX = scanner.nextInt();
        int startY = scanner.nextInt();
        int goalX = scanner.nextInt();
        int goalY = scanner.nextInt();
        
        System.out.println(minimumMoves(grid, startX, startY, goalX, goalY));
        
        scanner.close();
    }
}
