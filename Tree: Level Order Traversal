import java.util.*;

// Node class for the binary tree
class Node {
    int data;
    Node left;
    Node right;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

public class Solution {
    public static void levelOrder(Node root) {
        if (root == null) {
            return; // Edge case: empty tree
        }
        
        Queue<Node> queue = new LinkedList<>();
        queue.add(root); // Start with the root
        
        while (!queue.isEmpty()) {
            Node currentNode = queue.poll(); // Get and remove the front of the queue
            System.out.print(currentNode.data + " "); // Print the current node's data
            
            // Add the left child to the queue if it exists
            if (currentNode.left != null) {
                queue.add(currentNode.left);
            }
            
            // Add the right child to the queue if it exists
            if (currentNode.right != null) {
                queue.add(currentNode.right);
            }
        }
    }

    // Helper method to create the binary tree from input
    public static Node insert(Node root, int data) {
        if (root == null) {
            return new Node(data);
        } else {
            Node cur;
            if (data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    // Main method for testing
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt(); // Number of nodes
        Node root = null;
        
        while (n-- > 0) {
            int data = scanner.nextInt();
            root = insert(root, data);
        }
        
        levelOrder(root);
        scanner.close();
    }
}
