import java.io.*;
import java.util.*;
import java.util.stream.*;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'bomberMan' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING_ARRAY grid
     */
    public static List<String> bomberMan(int n, List<String> grid) {
        if (n == 1) {
            // If n = 1, return the original grid
            return grid;
        }
        
        int rows = grid.size();
        int cols = grid.get(0).length();
        
        // If n is even, the grid will be entirely filled with bombs
        if (n % 2 == 0) {
            List<String> fullBombGrid = new ArrayList<>();
            String row = "O".repeat(cols);
            for (int i = 0; i < rows; i++) {
                fullBombGrid.add(row);
            }
            return fullBombGrid;
        }
        
        // Generate the state for t = 3 and t = 5
        char[][] gridT3 = simulate(grid);
        char[][] gridT5 = simulate(convertToStringList(gridT3));
        
        // Determine which grid to return based on (n % 4)
        if (n % 4 == 3) {
            return convertToStringList(gridT3);
        } else {
            return convertToStringList(gridT5);
        }
    }
    
    // Helper function to simulate one time step of bomb explosions
    private static char[][] simulate(List<String> grid) {
        int rows = grid.size();
        int cols = grid.get(0).length();
        char[][] nextGrid = new char[rows][cols];
        
        // Initialize nextGrid to be fully filled with bombs
        for (int i = 0; i < rows; i++) {
            Arrays.fill(nextGrid[i], 'O');
        }
        
        // Detonate the bombs from the current grid
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid.get(i).charAt(j) == 'O') {
                    nextGrid[i][j] = '.';
                    if (i > 0) nextGrid[i - 1][j] = '.'; // Up
                    if (i < rows - 1) nextGrid[i + 1][j] = '.'; // Down
                    if (j > 0) nextGrid[i][j - 1] = '.'; // Left
                    if (j < cols - 1) nextGrid[i][j + 1] = '.'; // Right
                }
            }
        }
        
        return nextGrid;
    }
    
    // Helper function to convert a 2D char array to a List<String>
    private static List<String> convertToStringList(char[][] grid) {
        List<String> result = new ArrayList<>();
        for (char[] row : grid) {
            result.add(new String(row));
        }
        return result;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int r = Integer.parseInt(firstMultipleInput[0]);
        int c = Integer.parseInt(firstMultipleInput[1]);
        int n = Integer.parseInt(firstMultipleInput[2]);

        List<String> grid = IntStream.range(0, r).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<String> result = Result.bomberMan(n, grid);

        bufferedWriter.write(
            result.stream()
                .collect(Collectors.joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
