#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#define EDGE_WEIGHT 6

typedef struct Node {
    int *neighbors;
    int size;
    int capacity;
} Node;

void addEdge(Node *graph, int u, int v) {
    if (graph[u].size == graph[u].capacity) {
        graph[u].capacity = graph[u].capacity == 0 ? 2 : graph[u].capacity * 2;
        graph[u].neighbors = realloc(graph[u].neighbors, graph[u].capacity * sizeof(int));
    }
    graph[u].neighbors[graph[u].size++] = v;
}

void bfs(Node *graph, int start, int n) {
    int visited[n];
    int distance[n];
    int queue[n];
    int front = 0, rear = 0;

    for (int i = 0; i < n; i++) {
        visited[i] = 0;
        distance[i] = -1;
    }

    visited[start] = 1;
    distance[start] = 0;
    queue[rear++] = start;

    while (front < rear) {
        int current = queue[front++];

        for (int i = 0; i < graph[current].size; i++) {
            int neighbor = graph[current].neighbors[i];
            if (!visited[neighbor]) {
                visited[neighbor] = 1;
                distance[neighbor] = distance[current] + EDGE_WEIGHT;
                queue[rear++] = neighbor;
            }
        }
    }

    for (int i = 0; i < n; i++) {
        if (i != start) printf("%d ", distance[i]);
    }
    printf("\n");
}

int main() {
    int q;
    scanf("%d", &q);

    while (q--) {
        int n, m;
        scanf("%d %d", &n, &m);

        Node *graph = (Node *)calloc(n, sizeof(Node));

        for (int i = 0; i < m; i++) {
            int u, v;
            scanf("%d %d", &u, &v);
            u--; v--;
            addEdge(graph, u, v);
            addEdge(graph, v, u);
        }

        int start;
        scanf("%d", &start);
        start--;

        bfs(graph, start, n);

        for (int i = 0; i < n; i++) {
            free(graph[i].neighbors);
        }
        free(graph);
    }

    return 0;
}
