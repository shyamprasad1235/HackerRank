import java.io.*;
import java.util.*;
import java.util.stream.*;

class Result {

    public static void almostSorted(List<Integer> arr) {
        int n = arr.size();
        int l = -1, r = -1;
        
        // Step 1: Find the first and last indices where the order is incorrect
        for (int i = 0; i < n - 1; i++) {
            if (arr.get(i) > arr.get(i + 1)) {
                l = i;
                break;
            }
        }
        
        if (l == -1) {
            // The array is already sorted
            System.out.println("yes");
            return;
        }
        
        for (int i = n - 1; i > 0; i--) {
            if (arr.get(i) < arr.get(i - 1)) {
                r = i;
                break;
            }
        }
        
        // Step 2: Try swapping
        Collections.swap(arr, l, r);
        if (isSorted(arr)) {
            System.out.println("yes");
            System.out.println("swap " + (l + 1) + " " + (r + 1));
            return;
        }
        Collections.swap(arr, l, r); // Undo swap
        
        // Step 3: Try reversing the subarray
        reverseSubarray(arr, l, r);
        if (isSorted(arr)) {
            System.out.println("yes");
            System.out.println("reverse " + (l + 1) + " " + (r + 1));
        } else {
            System.out.println("no");
        }
    }
    
    private static boolean isSorted(List<Integer> arr) {
        for (int i = 0; i < arr.size() - 1; i++) {
            if (arr.get(i) > arr.get(i + 1)) {
                return false;
            }
        }
        return true;
    }

    private static void reverseSubarray(List<Integer> arr, int l, int r) {
        while (l < r) {
            Collections.swap(arr, l++, r--);
        }
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(Collectors.toList());

        Result.almostSorted(arr);

        bufferedReader.close();
    }
}
