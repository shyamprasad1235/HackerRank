#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int *a;
    int top;
    int cap;
} Stack;

void init(Stack *s, int cap) {
    s->a = (int*)malloc(sizeof(int)*cap);
    s->top = -1;
    s->cap = cap;
}

int empty(Stack *s) { return s->top < 0; }

void push(Stack *s, int v) {
    s->a[++s->top] = v; // cap is q, safe for this problem constraints
}

int pop(Stack *s) {
    return s->a[s->top--];
}

int peek(Stack *s) {
    return s->a[s->top];
}

int main(void) {
    int q;
    if (scanf("%d", &q) != 1) return 0;

    Stack in, out;
    init(&in, q);
    init(&out, q);

    for (int i = 0; i < q; i++) {
        int type;
        scanf("%d", &type);
        if (type == 1) {
            int x; scanf("%d", &x);
            push(&in, x);
        } else if (type == 2) {
            if (empty(&out)) {
                while (!empty(&in)) push(&out, pop(&in));
            }
            // assuming valid input (queue non-empty when dequeue called)
            if (!empty(&out)) (void)pop(&out);
        } else if (type == 3) {
            if (empty(&out)) {
                while (!empty(&in)) push(&out, pop(&in));
            }
            if (!empty(&out)) printf("%d\n", peek(&out));
        }
    }

    free(in.a);
    free(out.a);
    return 0;
}
