import java.io.*;
import java.util.*;

class Node {
    int data;
    Node left, right;
    Node(int data) {
        this.data = data;
        left = right = null;
    }
}

class QueueNode {
    Node node;
    int hd;
    QueueNode(Node n, int h) {
        node = n;
        hd = h;
    }
}

public class Solution {

    public static Node insert(Node root, int data) {
        if (root == null) {
            return new Node(data);
        }
        if (data <= root.data) {
            root.left = insert(root.left, data);
        } else {
            root.right = insert(root.right, data);
        }
        return root;
    }

    public static void topView(Node root) {
        if (root == null) return;

        TreeMap<Integer, Integer> topViewMap = new TreeMap<>();
        Queue<QueueNode> queue = new LinkedList<>();

        queue.add(new QueueNode(root, 0));

        while (!queue.isEmpty()) {
            QueueNode temp = queue.poll();
            int hd = temp.hd;
            Node node = temp.node;

            if (!topViewMap.containsKey(hd)) {
                topViewMap.put(hd, node.data);
            }

            if (node.left != null) {
                queue.add(new QueueNode(node.left, hd - 1));
            }
            if (node.right != null) {
                queue.add(new QueueNode(node.right, hd + 1));
            }
        }

        for (Map.Entry<Integer, Integer> entry : topViewMap.entrySet()) {
            System.out.print(entry.getValue() + " ");
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Node root = null;

        int t = sc.nextInt(); // number of elements
        while (t-- > 0) {
            int data = sc.nextInt();
            root = insert(root, data);
        }

        topView(root);
        sc.close();
    }
}
