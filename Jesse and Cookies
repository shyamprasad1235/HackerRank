int cookies(int k, int A_count, int* A) {
    int capacity = A_count * 2; 
    int* heap = (int*)malloc(sizeof(int) * capacity);
    if (!heap) exit(EXIT_FAILURE); 

    int heap_size = 0;
    void swap(int* a, int* b) {
        int temp = *a;
        *a = *b;
        *b = temp;
    }

    void heapify_up(int idx) {
        while (idx > 0 && heap[(idx - 1) / 2] > heap[idx]) {
            swap(&heap[idx], &heap[(idx - 1) / 2]);
            idx = (idx - 1) / 2;
        }
    }

    void heapify_down(int idx) {
        int smallest = idx;
        while (1) {
            int left = 2 * idx + 1;
            int right = 2 * idx + 2;
            if (left < heap_size && heap[left] < heap[smallest]) smallest = left;
            if (right < heap_size && heap[right] < heap[smallest]) smallest = right;

            if (smallest != idx) {
                swap(&heap[smallest], &heap[idx]);
                idx = smallest;
            } else break;
        }
    }

    void insert(int val) {
        heap[heap_size] = val;
        heapify_up(heap_size);
        heap_size++;
    }

    int extract_min() {
        if (heap_size == 0) return -1;
        int min = heap[0];
        heap[0] = heap[--heap_size];
        heapify_down(0);
        return min;
    }

    for (int i = 0; i < A_count; i++) {
        insert(A[i]);
    }

    int ops = 0;
    while (heap_size > 0 && heap[0] < k) {
        if (heap_size < 2) {
            free(heap);
            return -1;
        }

        int least = extract_min();
        int second = extract_min();

        int combined = least + 2 * second;
        insert(combined);
        ops++;
    }

    free(heap);
    return ops;
}
