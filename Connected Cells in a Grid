int dfs(int** matrix, int rows, int cols, int i, int j, bool** visited) {
    if (i < 0 || i >= rows || j < 0 || j >= cols || visited[i][j] || matrix[i][j] == 0)
        return 0;
    visited[i][j] = true;
    int size = 1;
    for (int dx = -1; dx <= 1; dx++) {
        for (int dy = -1; dy <= 1; dy++) {
            if (dx != 0 || dy != 0) {
                size += dfs(matrix, rows, cols, i + dx, j + dy, visited);
            }
        }
    }

    return size;
}

int connectedCell(int matrix_rows, int matrix_columns, int** matrix) {
    bool** visited = malloc(matrix_rows * sizeof(bool*));
    for (int i = 0; i < matrix_rows; i++) {
        visited[i] = calloc(matrix_columns, sizeof(bool));
    }
    int max_region = 0;
    for (int i = 0; i < matrix_rows; i++) {
        for (int j = 0; j < matrix_columns; j++) {
            if (matrix[i][j] == 1 && !visited[i][j]) {
                int region_size = dfs(matrix, matrix_rows, matrix_columns, i, j, visited);
                if (region_size > max_region) {
                    max_region = region_size;
                }
            }
        }
    }
    for (int i = 0; i < matrix_rows; i++) {
        free(visited[i]);
    }
    free(visited);
    return max_region;
}
