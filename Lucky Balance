int compare(const void* a, const void* b) {
    return (*(int*)b - *(int*)a); // Descending order
}

int luckBalance(int k, int contests_rows, int contests_columns, int** contests) {
    int total_luck = 0;
    int important_count = 0;
    int* important_luck = malloc(contests_rows * sizeof(int));

    for (int i = 0; i < contests_rows; i++) {
        int luck = contests[i][0]; // Luck value
        int importance = contests[i][1]; // Importance (0 or 1)
        
        if (importance == 0) {

            total_luck += luck;
        } else {

            important_luck[important_count++] = luck;
        }
    }
    
    qsort(important_luck, important_count, sizeof(int), compare);

    for (int i = 0; i < important_count; i++) {
        if (i < k) {
            // Lose up to k important contests to gain luck
            total_luck += important_luck[i];
        } else {
            // Win the rest, losing luck
            total_luck -= important_luck[i];
        }
    }

    free(important_luck);
    
    return total_luck;
}
