import java.io.*;
import java.util.*;
import java.util.stream.*;

class Result {

    public static int lilysHomework(List<Integer> arr) {
        return Math.min(minimumSwaps(new ArrayList<>(arr), true),  // Ascending order
                        minimumSwaps(new ArrayList<>(arr), false)); // Descending order
    }

    private static int minimumSwaps(List<Integer> arr, boolean ascending) {
        int n = arr.size();
        Map<Integer, Integer> indexMap = new HashMap<>();
        
        List<Integer> sortedArr = new ArrayList<>(arr);
        if (ascending) {
            Collections.sort(sortedArr);
        } else {
            Collections.sort(sortedArr, Collections.reverseOrder());
        }
        
        for (int i = 0; i < n; i++) {
            indexMap.put(arr.get(i), i);
        }

        boolean[] visited = new boolean[n];
        int swaps = 0;

        for (int i = 0; i < n; i++) {
            if (visited[i] || arr.get(i).equals(sortedArr.get(i))) {
                continue;
            }

            int cycleSize = 0;
            int j = i;

            while (!visited[j]) {
                visited[j] = true;
                j = indexMap.get(sortedArr.get(j));
                cycleSize++;
            }

            if (cycleSize > 1) {
                swaps += (cycleSize - 1);
            }
        }
        return swaps;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());
        List<Integer> arr = Stream.of(bufferedReader.readLine().trim().split(" "))
                                  .map(Integer::parseInt)
                                  .collect(Collectors.toList());

        int result = Result.lilysHomework(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
